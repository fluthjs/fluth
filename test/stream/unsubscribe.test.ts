import { expect, describe, test, vi, beforeEach } from 'vitest'
import { consoleSpy, sleep, promiseConsoleFactory } from '../utils'
import { $ } from '../../index'

describe('Stream unsubscribe scenarios', () => {
  beforeEach(() => {
    vi.useFakeTimers()
    consoleSpy.mockClear()
    process.setMaxListeners(100)
  })

  test('test stream finish when multiple deep sync child observer', async () => {
    const promise$ = $()
    const observer1 = () => console.log('observer1')
    const observer11 = () => console.log('observer11')
    const observer12 = () => console.log('observer12')
    const observer111 = () => console.log('observer111')
    const observer2 = () => console.log('observer2')
    const observer3 = () => console.log('observer3')
    const observer4 = () => console.log('observer4')
    const observable1$ = promise$.then(observer1)
    const observable11$ = observable1$.then(observer11)
    const observable12$ = observable1$.then(observer12)
    const observable111$ = observable11$.then(observer111)
    const observable2$ = promise$.then(observer2)
    const observable3$ = promise$.then(observer3)
    const observable4$ = promise$.then(observer4)
    promise$.next(true, true)
    // all observable should be clean
    expect(consoleSpy).toHaveBeenCalledTimes(7)
    expect((promise$ as any)._cacheRootPromise).toBeNull()
    expect((observable1$ as any)._cacheRootPromise).toBeNull()
    expect((observable11$ as any)._cacheRootPromise).toBeNull()
    expect((observable12$ as any)._cacheRootPromise).toBeNull()
    expect((observable111$ as any)._cacheRootPromise).toBeNull()
    expect((observable2$ as any)._cacheRootPromise).toBeNull()
    expect((observable3$ as any)._cacheRootPromise).toBeNull()
    expect((observable4$ as any)._cacheRootPromise).toBeNull()
    consoleSpy.mockClear()
    promise$.next(true)
    expect(consoleSpy).toHaveBeenCalledTimes(0)
  })

  test('test stream finish when multiple deep async child observer', async () => {
    const promise$ = $()
    const observer1 = () => promiseConsoleFactory(100, 'observer1')
    const observer11 = () => promiseConsoleFactory(100, 'observer11')
    const observer12 = () => promiseConsoleFactory(100, 'observer12')
    const observer111 = () => promiseConsoleFactory(100, 'observer111')
    const observer2 = () => promiseConsoleFactory(100, 'observer2')
    const observer3 = () => promiseConsoleFactory(100, 'observer3')
    const observable1$ = promise$.then(observer1)
    const observable11$ = observable1$.then(observer11)
    const observable12$ = observable1$.then(observer12)
    const observable111$ = observable11$.then(observer111)
    const observable2$ = promise$.then(observer2)
    const observable3$ = promise$.then(observer3)
    promise$.next(Promise.resolve(), true)
    await sleep(310)
    expect(consoleSpy).toHaveBeenCalledTimes(6)
    // all observable should be clean
    expect((promise$ as any)._cacheRootPromise).toBeNull()
    expect((observable1$ as any)._cacheRootPromise).toBeNull()
    expect((observable11$ as any)._cacheRootPromise).toBeNull()
    expect((observable12$ as any)._cacheRootPromise).toBeNull()
    expect((observable111$ as any)._cacheRootPromise).toBeNull()
    expect((observable2$ as any)._cacheRootPromise).toBeNull()
    expect((observable3$ as any)._cacheRootPromise).toBeNull()
    consoleSpy.mockClear()
    promise$.next(Promise.resolve())
    await sleep(310)
    expect(consoleSpy).toHaveBeenCalledTimes(0)
  })

  test('test stream unsubscribe when sync child observer', async () => {
    const promise$ = $()
    const observer1 = () => console.log('observer1')
    const observer11 = () => console.log('observer11')
    const observer12 = () => console.log('observer12')
    const observer111 = () => console.log('observer111')
    const observer2 = () => console.log('observer2')
    const observer3 = () => console.log('observer3')
    const observer4 = () => console.log('observer4')
    const observable1$ = promise$.then(observer1)
    const observable11$ = observable1$.then(observer11)
    const observable12$ = observable1$.then(observer12)
    const observable111$ = observable11$.then(observer111)
    const observable2$ = promise$.then(observer2)
    const observable3$ = promise$.then(observer3)
    const observable4$ = promise$.then(observer4)
    promise$.unsubscribe()
    promise$.next(true)
    expect(consoleSpy).toHaveBeenCalledTimes(0)
    expect((promise$ as any)._cacheRootPromise).toBeNull()
    expect((observable1$ as any)._cacheRootPromise).toBeNull()
    expect((observable11$ as any)._cacheRootPromise).toBeNull()
    expect((observable12$ as any)._cacheRootPromise).toBeNull()
    expect((observable111$ as any)._cacheRootPromise).toBeNull()
    expect((observable2$ as any)._cacheRootPromise).toBeNull()
    expect((observable3$ as any)._cacheRootPromise).toBeNull()
    expect((observable4$ as any)._cacheRootPromise).toBeNull()
  })

  test('test unsubscribe when async child observer', async () => {
    const promise$ = $()
    const observer1 = () => promiseConsoleFactory(100, 'observer1')
    const observer11 = () => promiseConsoleFactory(100, 'observer111')
    const observer12 = () => promiseConsoleFactory(100, 'observer12')
    const observer111 = () => promiseConsoleFactory(100, 'observer111')
    const observer2 = () => promiseConsoleFactory(100, 'observer2')
    const observer3 = () => promiseConsoleFactory(100, 'observer3')
    const observable1$ = promise$.then(observer1)
    const observable11$ = observable1$.then(observer11)
    const observable12$ = observable1$.then(observer12)
    const observable111$ = observable11$.then(observer111)
    const observable2$ = promise$.then(observer2)
    const observable3$ = promise$.then(observer3)
    promise$.unsubscribe()
    promise$.next(Promise.resolve())
    await sleep(310)
    expect(consoleSpy).toHaveBeenCalledTimes(0)
    expect((promise$ as any)._cacheRootPromise).toBeNull()
    expect((observable1$ as any)._cacheRootPromise).toBeNull()
    expect((observable11$ as any)._cacheRootPromise).toBeNull()
    expect((observable12$ as any)._cacheRootPromise).toBeNull()
    expect((observable111$ as any)._cacheRootPromise).toBeNull()
    expect((observable2$ as any)._cacheRootPromise).toBeNull()
    expect((observable3$ as any)._cacheRootPromise).toBeNull()
  })

  test('test unsubscribe when child is pending', async () => {
    const promise$ = $()
    const observer1 = () => promiseConsoleFactory(100, 'observer1')
    const observer11 = () => promiseConsoleFactory(100, 'observer111')
    const observable1$ = promise$.then(observer1)
    const observable11$ = observable1$.then(observer11)
    promise$.next(Promise.resolve())
    await sleep(50)
    promise$.unsubscribe()
    await sleep(160)
    expect(consoleSpy).toHaveBeenCalledTimes(2)
    expect((promise$ as any)._cacheRootPromise).toBeNull()
    expect((observable1$ as any)._cacheRootPromise).toBeNull()
    expect((observable11$ as any)._cacheRootPromise).toBeNull()
  })
})
